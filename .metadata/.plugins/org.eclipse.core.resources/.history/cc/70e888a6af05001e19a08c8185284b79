package com.exercise.exer.question;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.ui.Model;
//import ch.qos.logback.core.model.Model; 이 모델 임포트 사용하면 안돼고 위에 있는 모델 임포트를 사용!!

import lombok.RequiredArgsConstructor;

//http://localhost:8082/question/list

@RequiredArgsConstructor // questionRepository의 필드에 대한 생성자를 생성한다.
@Controller
public class QuestionController {

	//읽기 전용 필드가 된다. 여기서 question_list.html 에 값을 전송만 해줄 거기 때문에 읽기 전용으로 있어도 된다. 
	private final QuestionRepository questionRepository;

	
	//컨트롤러에서 모델 객체를 사용하기 위한 메소드
	// String list(Model model) 이 형태를 하는 이유는 
	//Spring MVC에서 컨트롤러에서 뷰로 데이터를 전달하기 위해 사용하는 모델 객체를 받기 위함
	 //컨트롤러에서 모델 객체를 매개변수로 받아올 수 있도록 하기 위해 String list(Model model)와 같이 메소드 시그니처를 작성
	@GetMapping("/question/list")
	public String list(Model model) { //model은 컨트롤러 => 뷰로 데이터를 전달.
		//QuestionRepository 인터페이스에 정의된 findAll()메서드를 호출하여 모든 Question 객체를 가져온다. 
		//List<Question>은 여러 개의 Question 객체를 담을 수 있는 리스트(List) "자료구조" 
		//만약 questionList의 변수명을 quesList라고 저장하면 새로운  List<Question>의 자료구조가 생성되어 quesList변수로 저장된다. (다른 값 저장 가능)
		//List<Question> 형태의 이름은 questionList으로 this.questionRepository.findAll(); 찾은 것들을 저장한다
		List<Question> questionList = this.questionRepository.findAll();
		
		//Model 객체에 데이터를 추가하는 메서드.  questionList라는 이름으로 questionList 변수의 값을 Model 객체에 추가
		model.addAttribute("questionList", questionList);

		return "question_list";
	}

}
